/********************************************************************
	Created:	2016-04-15  10:46:52
	Filename: 	AVRGameConsole2.3\PlatformDrv\LCD\font6x8.cpp

	Author:		Unknown

	purpose:	Monowidth font 6x8 (without cyrillic symbols)
*********************************************************************/

//------------------------------------- Настройка шрифта ----------------------------------------------------

#define FONT6X8_USE_8					//Использовать функцию для печати 8-ми битным цветом
//#define FONT6X8_USE_16				//Использовать функцию для печати 16-ти битным цветом
//#define FONT6X8_USE_8BGL				//Использовать функцию для печати 8-ми битным цветом без фона
//#define FONT6X8_USE_16BGL				//Использовать функцию для печати 16-ти битным цветом без фона
#define FONT6X8_STORE_IN_EEPROM			//Созранить шрифт в EEPROM. Иначе сохранение во flash

//-----------------------------------------------------------------------------------------------------------


#include <avr/pgmspace.h>
#ifdef FONT6X8_STORE_IN_EEPROM
#include <avr/eeprom.h>
#endif //FONT6X8_STORE_IN_EEPROM
#include "fonts.hpp"


#ifdef FONT6X8_STORE_IN_EEPROM
static const uint8_t EEMEM table6x8[576] = {
#else
static const uint8_t table6x8[576] PROGMEM = {
#endif //FONT6X8_STORE_IN_EEPROM
	0x00,0x00,0x00,0x00,0x00,0x00, // Symbol 20
	0x00,0x00,0x00,0x5F,0x00,0x00, // Symbol 21
	0x00,0x00,0x03,0x00,0x03,0x00, // Symbol 22
	0x22,0x7F,0x22,0x22,0x7F,0x22, // Symbol 23
	0x00,0x24,0x2A,0x6B,0x2A,0x12, // Symbol 24
	0x00,0x23,0x13,0x08,0x64,0x62, // Symbol 25
	0x00,0x3A,0x45,0x45,0x3A,0x28, // Symbol 26
	0x00,0x00,0x00,0x02,0x01,0x00, // Symbol 27
	0x00,0x00,0x3E,0x41,0x00,0x00, // Symbol 28
	0x00,0x00,0x41,0x3E,0x00,0x00, // Symbol 29
	0x00,0x2A,0x1C,0x1C,0x2A,0x00, // Symbol 2A
	0x00,0x08,0x08,0x3E,0x08,0x08, // Symbol 2B
	0x00,0x00,0x80,0x40,0x00,0x00, // Symbol 2C
	0x00,0x08,0x08,0x08,0x08,0x00, // Symbol 2D
	0x00,0x00,0x00,0x40,0x00,0x00, // Symbol 2E
	0x00,0x20,0x10,0x08,0x04,0x02, // Symbol 2F
	0x00,0x3E,0x51,0x49,0x45,0x3E, // Symbol 30
	0x00,0x00,0x42,0x7F,0x40,0x00, // Symbol 31
	0x00,0x62,0x51,0x51,0x51,0x4E, // Symbol 32
	0x00,0x21,0x41,0x45,0x45,0x3B, // Symbol 33
	0x00,0x18,0x16,0x11,0x7F,0x10, // Symbol 34
	0x00,0x27,0x45,0x45,0x45,0x39, // Symbol 35
	0x00,0x3E,0x49,0x49,0x49,0x32, // Symbol 36
	0x00,0x01,0x61,0x11,0x09,0x07, // Symbol 37
	0x00,0x36,0x49,0x49,0x49,0x36, // Symbol 38
	0x00,0x26,0x49,0x49,0x49,0x3E, // Symbol 39
	0x00,0x00,0x00,0x12,0x00,0x00, // Symbol 3A
	0x00,0x00,0x20,0x12,0x00,0x00, // Symbol 3B
	0x00,0x08,0x14,0x22,0x41,0x00, // Symbol 3C
	0x00,0x14,0x14,0x14,0x14,0x14, // Symbol 3D
	0x00,0x41,0x22,0x14,0x08,0x00, // Symbol 3E
	0x00,0x06,0x01,0x51,0x09,0x06, // Symbol 3F
	0x00,0x3E,0x41,0x4D,0x4D,0x2E, // Symbol 40
	0x00,0x78,0x16,0x11,0x16,0x78, // Symbol 41
	0x00,0x7F,0x49,0x49,0x49,0x36, // Symbol 42
	0x00,0x3E,0x41,0x41,0x41,0x22, // Symbol 43
	0x00,0x7F,0x41,0x41,0x41,0x3E, // Symbol 44
	0x00,0x7F,0x49,0x49,0x49,0x41, // Symbol 45
	0x00,0x7F,0x09,0x09,0x09,0x01, // Symbol 46
	0x00,0x3E,0x41,0x41,0x51,0x32, // Symbol 47
	0x00,0x7F,0x08,0x08,0x08,0x7F, // Symbol 48
	0x00,0x00,0x41,0x7F,0x41,0x00, // Symbol 49
	0x00,0x30,0x40,0x41,0x41,0x3F, // Symbol 4A
	0x00,0x7F,0x08,0x08,0x14,0x63, // Symbol 4B
	0x00,0x7F,0x40,0x40,0x40,0x60, // Symbol 4C
	0x00,0x7F,0x04,0x18,0x04,0x7F, // Symbol 4D
	0x00,0x7F,0x04,0x08,0x10,0x7F, // Symbol 4E
	0x00,0x3E,0x41,0x41,0x41,0x3E, // Symbol 4F
	0x00,0x7F,0x09,0x09,0x09,0x06, // Symbol 50
	0x00,0x3E,0x41,0x61,0x21,0x5E, // Symbol 51
	0x00,0x7F,0x09,0x09,0x19,0x66, // Symbol 52
	0x00,0x26,0x49,0x49,0x49,0x32, // Symbol 53
	0x00,0x01,0x01,0x7F,0x01,0x01, // Symbol 54
	0x00,0x3F,0x40,0x40,0x40,0x3F, // Symbol 55
	0x00,0x07,0x18,0x60,0x18,0x07, // Symbol 56
	0x00,0x1F,0x60,0x18,0x60,0x1F, // Symbol 57
	0x00,0x63,0x14,0x08,0x14,0x63, // Symbol 58
	0x00,0x03,0x04,0x78,0x04,0x03, // Symbol 59
	0x00,0x61,0x51,0x49,0x45,0x43, // Symbol 5A
	0x00,0x00,0x7F,0x41,0x00,0x00, // Symbol 5B
	0x00,0x02,0x04,0x08,0x10,0x20, // Symbol 5C
	0x00,0x00,0x41,0x7F,0x00,0x00, // Symbol 5D
	0x00,0x00,0x00,0x00,0x00,0x00, // Symbol 5E
	0x40,0x40,0x40,0x40,0x40,0x40, // Symbol 5F
	0x00,0x00,0x00,0x01,0x02,0x00, // Symbol 60
	0x00,0x20,0x54,0x54,0x54,0x78, // Symbol 61
	0x00,0x7E,0x48,0x48,0x48,0x30, // Symbol 62
	0x00,0x38,0x44,0x44,0x44,0x28, // Symbol 63
	0x00,0x30,0x48,0x48,0x48,0x7E, // Symbol 64
	0x00,0x38,0x54,0x54,0x54,0x18, // Symbol 65
	0x00,0x10,0x7C,0x12,0x02,0x04, // Symbol 66
	0x00,0x0C,0x52,0x52,0x3C,0x02, // Symbol 67
	0x00,0x7E,0x08,0x08,0x08,0x70, // Symbol 68
	0x00,0x00,0x00,0x74,0x00,0x00, // Symbol 69
	0x00,0x40,0x80,0x80,0x74,0x00, // Symbol 6A
	0x00,0x7E,0x10,0x10,0x10,0x6C, // Symbol 6B
	0x00,0x00,0x02,0x7E,0x00,0x00, // Symbol 6C
	0x00,0x7C,0x04,0x78,0x04,0x78, // Symbol 6D
	0x00,0x7C,0x04,0x04,0x04,0x78, // Symbol 6E
	0x00,0x38,0x44,0x44,0x44,0x38, // Symbol 6F
	0x00,0xFC,0x24,0x24,0x24,0x18, // Symbol 70
	0x00,0x18,0x24,0x24,0x24,0xFC, // Symbol 71
	0x00,0x7C,0x08,0x04,0x04,0x08, // Symbol 72
	0x00,0x48,0x54,0x54,0x54,0x20, // Symbol 73
	0x00,0x08,0x3E,0x48,0x40,0x00, // Symbol 74
	0x00,0x3C,0x40,0x40,0x40,0x3C, // Symbol 75
	0x00,0x1C,0x20,0x40,0x20,0x1C, // Symbol 76
	0x00,0x3C,0x40,0x30,0x40,0x3C, // Symbol 77
	0x00,0x44,0x28,0x10,0x28,0x44, // Symbol 78
	0x00,0x1C,0x20,0xA0,0xA0,0x7C, // Symbol 79
	0x00,0x44,0x64,0x54,0x4C,0x44, // Symbol 7A
	0x00,0x08,0x36,0x41,0x00,0x00, // Symbol 7B
	0x00,0x00,0x00,0x7F,0x00,0x00, // Symbol 7C
	0x00,0x00,0x41,0x36,0x08,0x00, // Symbol 7D
	0x02,0x01,0x01,0x02,0x02,0x01, // Symbol 7E
	0x00,0x7F,0x7F,0x7F,0x7F,0x7F  // Symbol 7F
};

void put_char6x8_8(const Coord_t x, const Coord_t y, const char c, const color8 color, const color8 bgcolor) {
	unsigned char mask, buf[6];
	const uint8_t *offset = table6x8 + 6 * (c - 0x20);
	lcd::SetWindow(x, y, 6, 8);
	lcd::SetDatMode();
	//У данного шрифта другой порядок заполнения пикселей
	//Поэтому для ускорения сначала считаем символ в буфер
	for (unsigned char i = 0; i < 6; i++) {
		#ifdef FONT6X8_STORE_IN_EEPROM
			buf[i] = eeprom_read_byte(offset + i);
		#else
			buf[i] = pgm_read_byte(offset + i);
		#endif //FONT6X8_STORE_IN_EEPROM
	}
	//Зетем выведем на экран
	for (mask = 1; mask; mask <<= 1) {
		for (unsigned char i = 0; i < 6; i++) {
			if (buf[i] & mask) {
				lcd::send8(color);
			} else {
				lcd::send8(bgcolor);
			}
		}
	}
}

void put_char6x8_16(const Coord_t x, const Coord_t y, const char c, const color16 color, const color16 bgcolor) {
	unsigned char mask, buf[6];
	const uint8_t *offset = table6x8 + 6 * (c - 0x20);
	lcd::SetWindow(x, y, 6, 8);
	lcd::SetDatMode();
	for (unsigned char i = 0; i < 6; i++) {
		#ifdef FONT6X8_STORE_IN_EEPROM
			buf[i] = eeprom_read_byte(offset + i);
		#else
			buf[i] = pgm_read_byte(offset + i);
		#endif //FONT6X8_STORE_IN_EEPROM
	}
	for (mask = 1; mask; mask <<= 1) {
		for (unsigned char i = 0; i < 6; i++) {
			if (buf[i] & mask) {
				lcd::send16(color);
			} else {
				lcd::send16(bgcolor);
			}
		}
	}
}

void put_char6x8_8BGL(const Coord_t x, const Coord_t y, const char c, const color8 color) {
	unsigned char buf[6];
	unsigned char i, mask, off_x = 0, off_y = 0;
	const uint8_t *offset = table6x8 + 6 * (c - 0x20);
	for (i = 0; i < 6; i++) {
		#ifdef FONT6X8_STORE_IN_EEPROM
			buf[i] = eeprom_read_byte(offset + i);
		#else
			buf[i] = pgm_read_byte(offset + i);
		#endif //FONT6X8_STORE_IN_EEPROM
	}
	for (mask = 1; mask; mask <<= 1, off_y++) {
		for (i = 0, off_x = 0; i < 6; i++, off_x++) {
			if (buf[i] & mask) {
				lcd::SetPixel(x + off_x, y + off_y, color);
			}
		}
	}
}

void put_char6x8_16BGL(const Coord_t x, const Coord_t y, const char c, const color16 color) {
	unsigned char buf[6];
	unsigned char i, mask, off_x = 0, off_y = 0;
	const uint8_t *offset = table6x8 + 6 * (c - 0x20);
	for (i = 0; i < 6; i++) {
		#ifdef FONT6X8_STORE_IN_EEPROM
			buf[i] = eeprom_read_byte(offset + i);
		#else
			buf[i] = pgm_read_byte(offset + i);
		#endif //FONT6X8_STORE_IN_EEPROM
	}
	for (mask = 1; mask; mask <<= 1, off_y++) {
		for (i = 0, off_x = 0; i < 6; i++, off_x++) {
			if (buf[i] & mask) {
				lcd::SetPixel(x + off_x, y + off_y, color);
			}
		}
	}
}

namespace fnt {
	const font font6x8 = {
		6, 8,

	#ifdef FONT6X8_USE_8
		put_char6x8_8,
	#else 
		nullptr,
	#endif //FONT6X8_USE_8

	#ifdef FONT6X8_USE_8BGL
		put_char6x8_8BGL,
	#else
		nullptr,
	#endif	//FONT6X8_USE_8BGL

	#ifdef FONT6X8_USE_16
		put_char6x8_16,
	#else
		nullptr,
	#endif //FONT6X8_USE_16

	#ifdef FONT6X8_USE_16BGL
		put_char6x8_16BGL
	#else
		nullptr
	#endif	//FONT6X8_USE_16BGL
	};
}
